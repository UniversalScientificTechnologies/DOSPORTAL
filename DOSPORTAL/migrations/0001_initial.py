# Generated by Django 4.2.11 on 2024-03-27 09:18

import DOSPORTAL.models
from django.conf import settings
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import martor.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Airports',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField()),
                ('code_iata', models.CharField(null=True, unique=True)),
                ('code_icao', models.CharField(null=True, unique=True)),
                ('lat', models.FloatField(null=True)),
                ('lon', models.FloatField(null=True)),
                ('alt', models.FloatField(null=True)),
                ('municipality', models.CharField(null=True)),
                ('web', models.CharField(null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CARImodel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('data', models.JSONField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Detector',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('sn', models.CharField(max_length=80)),
                ('name', models.CharField(max_length=150, verbose_name='Detector name')),
                ('manufactured_date', models.DateField(blank=True, help_text='Date when detector was manufactured', null=True, verbose_name='Manufactured date')),
                ('data', models.JSONField(help_text='Detector metadata, used for advanced data processing and maintaining', verbose_name='Detector metadata')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DetectorCalib',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(verbose_name='Calibration name')),
                ('description', models.TextField(verbose_name='Description of calibration status')),
                ('date', models.DateTimeField()),
                ('coef0', models.FloatField(default=0.0, verbose_name='Coefficient 0 (offset)')),
                ('coef1', models.FloatField(default=1, verbose_name='Coefficient 1, (linear)')),
                ('coef2', models.FloatField(default=0.0, verbose_name='Coefficient 2, (quadratic)')),
                ('cabib', models.JSONField(null=True, verbose_name='Slozky kalibrace, json')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DetectorManufacturer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=80)),
                ('url', models.URLField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Flight',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('flight_number', models.CharField()),
                ('departure_time', models.DateTimeField(null=True, verbose_name='Scheduled departure time')),
                ('trajectory_file', models.FileField(upload_to=DOSPORTAL.models.Flight.user_directory_path, verbose_name='Trajectory log')),
                ('cari', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='DOSPORTAL.carimodel')),
                ('land', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='landing', to='DOSPORTAL.airports')),
                ('takeoff', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='takeoff', to='DOSPORTAL.airports')),
            ],
            options={
                'unique_together': {('flight_number', 'departure_time')},
            },
        ),
        migrations.CreateModel(
            name='measurement_campaign',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(blank=True, max_length=150, null=True, verbose_name='measurement name')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('slug', models.SlugField(blank=True, max_length=255, unique=True)),
                ('data_policy', models.CharField(choices=[('PR', 'Private'), ('PU', 'Public'), ('NV', 'Non-public')], default='PU', max_length=2)),
                ('can_users_change_policy', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('website', models.URLField(blank=True, null=True)),
                ('contact_email', models.EmailField(blank=True, max_length=200, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Trajectory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=80)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TrajectoryPoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(blank=True, null=True, verbose_name='Point timestamp')),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326)),
                ('trajectory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='points', to='DOSPORTAL.trajectory')),
            ],
        ),
        migrations.CreateModel(
            name='record',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('log_file', models.FileField(blank=True, upload_to=DOSPORTAL.models.record.user_directory_path, verbose_name='File log')),
                ('log_original_filename', models.CharField()),
                ('time_start', models.DateTimeField(null=True, verbose_name='Measurement beginning time')),
                ('record_duration', models.DurationField(help_text='Duration of record', null=True, verbose_name='Record duration')),
                ('record_type', models.CharField(choices=[('U', 'Unknown'), ('S', 'Spectral measurements'), ('E', 'Event measurements'), ('L', 'Location')], default='U', help_text='Type of log file', verbose_name='Certain record type, enum')),
                ('metadata', models.JSONField(help_text='record metadata, used for advanced data processing and maintaining', null=True, verbose_name='record_metadata')),
                ('data_policy', models.CharField(choices=[('PR', 'Private'), ('PU', 'Public'), ('NV', 'Non-public')], default='PU', max_length=2)),
                ('belongs', models.ForeignKey(help_text='Organization, which owns this record', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='records_owning', to='DOSPORTAL.organization')),
                ('detector', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='records', to='DOSPORTAL.detector')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(default='default_user_profileimage.jpg', upload_to='profile_pics')),
                ('web', models.URLField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OrganizationUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_type', models.CharField(choices=[('ME', 'Member'), ('AD', 'Admin'), ('OW', 'Owner')], default='ME', max_length=2)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_organizations', to='DOSPORTAL.organization')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organization_users', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'organization')},
            },
        ),
        migrations.AddField(
            model_name='organization',
            name='users',
            field=models.ManyToManyField(related_name='organizations', through='DOSPORTAL.OrganizationUser', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='MeasurementDataFlight',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('flight', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='measurements', to='DOSPORTAL.flight')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='measurement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('time_start', models.DateTimeField(blank=True, null=True, verbose_name='Measurement beginning time')),
                ('time_end', models.DateTimeField(blank=True, null=True, verbose_name='Measurement beginning time')),
                ('time_created', models.DateTimeField(auto_now_add=True, verbose_name='Time of creation')),
                ('name', models.CharField(max_length=150, verbose_name='measurement name')),
                ('description', martor.models.MartorField(blank=True, verbose_name='Measurement description')),
                ('public', models.BooleanField(default=True, verbose_name='Will be data publicly available')),
                ('measurement_type', models.CharField(choices=[('D', 'Debug measurement'), ('S', 'Static measurement'), ('M', 'Mobile measurement (ground)'), ('C', 'Civil airborne measurement'), ('A', 'Special airborne measurement')], default='S', help_text='Type of measurement', verbose_name='Certain measurement type, enum')),
                ('base_location_lat', models.FloatField(blank=True, default=None, null=True)),
                ('base_location_lon', models.FloatField(blank=True, default=None, null=True)),
                ('base_location_alt', models.FloatField(blank=True, default=None, null=True)),
                ('location_file', models.FileField(blank=True, upload_to=DOSPORTAL.models.measurement.user_directory_path, verbose_name='File log')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='measurements', to=settings.AUTH_USER_MODEL)),
                ('campaings', models.ManyToManyField(blank=True, related_name='Campaigns', to='DOSPORTAL.measurement_campaign')),
                ('flight', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='measurement', to='DOSPORTAL.flight', verbose_name='Reference na objekt s informacemi o letu')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DetectorType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=80)),
                ('manufacturer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DOSPORTAL.detectormanufacturer')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DetectorLogbook',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('text', models.TextField(help_text='Detailed description of activity made on the detector.', verbose_name='Logbook text')),
                ('public', models.BooleanField(default=True, help_text='Private logbook will be visible for maintainers of detector and for dosportal admins.', verbose_name='Wish to be visible to everyone?')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('detector', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logbook', to='DOSPORTAL.detector')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='detector',
            name='access',
            field=models.ManyToManyField(blank=True, related_name='detector_access', to='DOSPORTAL.organization'),
        ),
        migrations.AddField(
            model_name='detector',
            name='calib',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='detectors', to='DOSPORTAL.detectorcalib'),
        ),
        migrations.AddField(
            model_name='detector',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='detectors', to='DOSPORTAL.organization'),
        ),
        migrations.AddField(
            model_name='detector',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='DOSPORTAL.detectortype'),
        ),
    ]
